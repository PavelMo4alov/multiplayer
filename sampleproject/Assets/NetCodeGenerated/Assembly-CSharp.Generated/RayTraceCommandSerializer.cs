//THIS FILE IS AUTOGENERATED BY GHOSTCOMPILER. DON'T MODIFY OR ALTER.
using AOT;
using Unity.Burst;
using Unity.Networking.Transport;
using Unity.Entities;
using Unity.Collections;
using Unity.NetCode;
using Unity.Transforms;
using Unity.Mathematics;


namespace Assembly_CSharp.Generated
{
    public struct RayTraceCommandSerializer : ICommandDataSerializer<RayTraceCommand>
    {
        public void Serialize(ref DataStreamWriter writer, in RayTraceCommand data)
        {
            writer.WriteFloat(data.origin.x);
            writer.WriteFloat(data.origin.y);
            writer.WriteFloat(data.origin.z);
            writer.WriteFloat(data.direction.x);
            writer.WriteFloat(data.direction.y);
            writer.WriteFloat(data.direction.z);
            writer.WriteUInt(data.lastFire);
        }

        public void Deserialize(ref DataStreamReader reader, ref RayTraceCommand data)
        {
            data.origin.x = reader.ReadFloat();
            data.origin.y = reader.ReadFloat();
            data.origin.z = reader.ReadFloat();
            data.direction.x = reader.ReadFloat();
            data.direction.y = reader.ReadFloat();
            data.direction.z = reader.ReadFloat();
            data.lastFire = (uint) reader.ReadUInt();
        }

        public void Serialize(ref DataStreamWriter writer, in RayTraceCommand data, in RayTraceCommand baseline, NetworkCompressionModel compressionModel)
        {
            writer.WritePackedFloatDelta(data.origin.x, baseline.origin.x, compressionModel);
            writer.WritePackedFloatDelta(data.origin.y, baseline.origin.y, compressionModel);
            writer.WritePackedFloatDelta(data.origin.z, baseline.origin.z, compressionModel);
            writer.WritePackedFloatDelta(data.direction.x, baseline.direction.x, compressionModel);
            writer.WritePackedFloatDelta(data.direction.y, baseline.direction.y, compressionModel);
            writer.WritePackedFloatDelta(data.direction.z, baseline.direction.z, compressionModel);
            writer.WritePackedUIntDelta(data.lastFire, baseline.lastFire, compressionModel);
        }

        public void Deserialize(ref DataStreamReader reader, ref RayTraceCommand data, in RayTraceCommand baseline, NetworkCompressionModel compressionModel)
        {
            data.origin.x = reader.ReadPackedFloatDelta(baseline.origin.x, compressionModel);
            data.origin.y = reader.ReadPackedFloatDelta(baseline.origin.y, compressionModel);
            data.origin.z = reader.ReadPackedFloatDelta(baseline.origin.z, compressionModel);
            data.direction.x = reader.ReadPackedFloatDelta(baseline.direction.x, compressionModel);
            data.direction.y = reader.ReadPackedFloatDelta(baseline.direction.y, compressionModel);
            data.direction.z = reader.ReadPackedFloatDelta(baseline.direction.z, compressionModel);
            data.lastFire = (uint) reader.ReadPackedUIntDelta(baseline.lastFire, compressionModel);
        }
    }
    public class RayTraceCommandSendCommandSystem : CommandSendSystem<RayTraceCommandSerializer, RayTraceCommand>
    {
        [BurstCompile]
        struct SendJob : IJobEntityBatch
        {
            public SendJobData data;
            public void Execute(ArchetypeChunk chunk, int orderIndex)
            {
                data.Execute(chunk, orderIndex);
            }
        }
        protected override void OnUpdate()
        {
            var sendJob = new SendJob{data = InitJobData()};
            ScheduleJobData(sendJob);
        }
    }
    public class RayTraceCommandReceiveCommandSystem : CommandReceiveSystem<RayTraceCommandSerializer, RayTraceCommand>
    {
        [BurstCompile]
        struct ReceiveJob : IJobEntityBatch
        {
            public ReceiveJobData data;
            public void Execute(ArchetypeChunk chunk, int orderIndex)
            {
                data.Execute(chunk, orderIndex);
            }
        }
        protected override void OnUpdate()
        {
            var recvJob = new ReceiveJob{data = InitJobData()};
            ScheduleJobData(recvJob);
        }
    }
}
