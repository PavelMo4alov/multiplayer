//THIS FILE IS AUTOGENERATED BY GHOSTCOMPILER. DON'T MODIFY OR ALTER.
using AOT;
using Unity.Burst;
using Unity.Networking.Transport;
using Unity.Entities;
using Unity.Collections;
using Unity.NetCode;
using Unity.Transforms;
using Unity.Mathematics;


namespace Asteroids.Mixed.Generated
{
    public struct ShipCommandDataSerializer : ICommandDataSerializer<ShipCommandData>
    {
        public void Serialize(ref DataStreamWriter writer, in ShipCommandData data)
        {
            writer.WriteUInt(data.left);
            writer.WriteUInt(data.right);
            writer.WriteUInt(data.thrust);
            writer.WriteUInt(data.shoot);
        }

        public void Deserialize(ref DataStreamReader reader, ref ShipCommandData data)
        {
            data.left = (byte) reader.ReadUInt();
            data.right = (byte) reader.ReadUInt();
            data.thrust = (byte) reader.ReadUInt();
            data.shoot = (byte) reader.ReadUInt();
        }

        public void Serialize(ref DataStreamWriter writer, in ShipCommandData data, in ShipCommandData baseline, NetworkCompressionModel compressionModel)
        {
            writer.WritePackedUIntDelta(data.left, baseline.left, compressionModel);
            writer.WritePackedUIntDelta(data.right, baseline.right, compressionModel);
            writer.WritePackedUIntDelta(data.thrust, baseline.thrust, compressionModel);
            writer.WritePackedUIntDelta(data.shoot, baseline.shoot, compressionModel);
        }

        public void Deserialize(ref DataStreamReader reader, ref ShipCommandData data, in ShipCommandData baseline, NetworkCompressionModel compressionModel)
        {
            data.left = (byte) reader.ReadPackedUIntDelta(baseline.left, compressionModel);
            data.right = (byte) reader.ReadPackedUIntDelta(baseline.right, compressionModel);
            data.thrust = (byte) reader.ReadPackedUIntDelta(baseline.thrust, compressionModel);
            data.shoot = (byte) reader.ReadPackedUIntDelta(baseline.shoot, compressionModel);
        }
    }
    public class ShipCommandDataSendCommandSystem : CommandSendSystem<ShipCommandDataSerializer, ShipCommandData>
    {
        [BurstCompile]
        struct SendJob : IJobEntityBatch
        {
            public SendJobData data;
            public void Execute(ArchetypeChunk chunk, int orderIndex)
            {
                data.Execute(chunk, orderIndex);
            }
        }
        protected override void OnUpdate()
        {
            var sendJob = new SendJob{data = InitJobData()};
            ScheduleJobData(sendJob);
        }
    }
    public class ShipCommandDataReceiveCommandSystem : CommandReceiveSystem<ShipCommandDataSerializer, ShipCommandData>
    {
        [BurstCompile]
        struct ReceiveJob : IJobEntityBatch
        {
            public ReceiveJobData data;
            public void Execute(ArchetypeChunk chunk, int orderIndex)
            {
                data.Execute(chunk, orderIndex);
            }
        }
        protected override void OnUpdate()
        {
            var recvJob = new ReceiveJob{data = InitJobData()};
            ScheduleJobData(recvJob);
        }
    }
}
